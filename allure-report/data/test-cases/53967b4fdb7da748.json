{
  "uid" : "53967b4fdb7da748",
  "name" : "test_nav_links",
  "fullName" : "tests.test_homepage.TestHomepage#test_nav_links",
  "historyId" : "7864a3d1e1f1b5cf0bc702b21217127a",
  "time" : {
    "start" : 1653648083874,
    "stop" : 1653648083874,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome=102.0.5005.63)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00DDD953+2414931]\n\tOrdinal0 [0x00D6F5E1+1963489]\n\tOrdinal0 [0x00C5C6B8+837304]\n\tOrdinal0 [0x00C58E18+822808]\n\tOrdinal0 [0x00C4DE5D+777821]\n\tOrdinal0 [0x00C4EA3B+780859]\n\tOrdinal0 [0x00C4E06A+778346]\n\tOrdinal0 [0x00C4D646+775750]\n\tOrdinal0 [0x00C4C565+771429]\n\tOrdinal0 [0x00C4CA3D+772669]\n\tOrdinal0 [0x00C5DEA4+843428]\n\tOrdinal0 [0x00CB4EBD+1199805]\n\tOrdinal0 [0x00CA449C+1131676]\n\tOrdinal0 [0x00CB4812+1198098]\n\tOrdinal0 [0x00CA42B6+1131190]\n\tOrdinal0 [0x00C7E860+976992]\n\tOrdinal0 [0x00C7F756+980822]\n\tGetHandleVerifier [0x0104CC62+2510274]\n\tGetHandleVerifier [0x0103F760+2455744]\n\tGetHandleVerifier [0x00E6EABA+551962]\n\tGetHandleVerifier [0x00E6D916+547446]\n\tOrdinal0 [0x00D75F3B+1990459]\n\tOrdinal0 [0x00D7A898+2009240]\n\tOrdinal0 [0x00D7A985+2009477]\n\tOrdinal0 [0x00D83AD1+2046673]\n\tBaseThreadInitThunk [0x76646739+25]\n\tRtlGetFullPathName_UEx [0x77D78FEF+1215]\n\tRtlGetFullPathName_UEx [0x77D78FBD+1165]",
  "statusTrace" : "request = <SubRequest 'setup' for <Function test_nav_links>>, get_webdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4edc09403365dfeb3ac426cdcc5f4ec5\")>\n\n    @pytest.fixture(scope='function')\n    def setup(request, get_webdriver):\n        driver = get_webdriver\n        driver = EventFiringWebDriver(driver, MyListener())\n        url = 'https://www.macys.com/'\n        if request.cls is not None:\n            request.cls.driver = driver\n>       driver.get(url)\n\ntests\\conftest.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:85: in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url, ))\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:183: in _dispatch\n    raise e\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:180: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:442: in get\n    self.execute(Command.GET, {'url': url})\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CA33DD44C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unk [0x76646739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77D78FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77D78FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome=102.0.5005.63)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00DDD953+2414931]\nE       \tOrdinal0 [0x00D6F5E1+1963489]\nE       \tOrdinal0 [0x00C5C6B8+837304]\nE       \tOrdinal0 [0x00C58E18+822808]\nE       \tOrdinal0 [0x00C4DE5D+777821]\nE       \tOrdinal0 [0x00C4EA3B+780859]\nE       \tOrdinal0 [0x00C4E06A+778346]\nE       \tOrdinal0 [0x00C4D646+775750]\nE       \tOrdinal0 [0x00C4C565+771429]\nE       \tOrdinal0 [0x00C4CA3D+772669]\nE       \tOrdinal0 [0x00C5DEA4+843428]\nE       \tOrdinal0 [0x00CB4EBD+1199805]\nE       \tOrdinal0 [0x00CA449C+1131676]\nE       \tOrdinal0 [0x00CB4812+1198098]\nE       \tOrdinal0 [0x00CA42B6+1131190]\nE       \tOrdinal0 [0x00C7E860+976992]\nE       \tOrdinal0 [0x00C7F756+980822]\nE       \tGetHandleVerifier [0x0104CC62+2510274]\nE       \tGetHandleVerifier [0x0103F760+2455744]\nE       \tGetHandleVerifier [0x00E6EABA+551962]\nE       \tGetHandleVerifier [0x00E6D916+547446]\nE       \tOrdinal0 [0x00D75F3B+1990459]\nE       \tOrdinal0 [0x00D7A898+2009240]\nE       \tOrdinal0 [0x00D7A985+2009477]\nE       \tOrdinal0 [0x00D83AD1+2046673]\nE       \tBaseThreadInitThunk [0x76646739+25]\nE       \tRtlGetFullPathName_UEx [0x77D78FEF+1215]\nE       \tRtlGetFullPathName_UEx [0x77D78FBD+1165]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "get_chrome_options",
    "time" : {
      "start" : 1653648083875,
      "stop" : 1653648083875,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "get_webdriver",
    "time" : {
      "start" : 1653648083875,
      "stop" : 1653648085048,
      "duration" : 1173
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1653648085048,
      "stop" : 1653648106245,
      "duration" : 21197
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome=102.0.5005.63)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00DDD953+2414931]\n\tOrdinal0 [0x00D6F5E1+1963489]\n\tOrdinal0 [0x00C5C6B8+837304]\n\tOrdinal0 [0x00C58E18+822808]\n\tOrdinal0 [0x00C4DE5D+777821]\n\tOrdinal0 [0x00C4EA3B+780859]\n\tOrdinal0 [0x00C4E06A+778346]\n\tOrdinal0 [0x00C4D646+775750]\n\tOrdinal0 [0x00C4C565+771429]\n\tOrdinal0 [0x00C4CA3D+772669]\n\tOrdinal0 [0x00C5DEA4+843428]\n\tOrdinal0 [0x00CB4EBD+1199805]\n\tOrdinal0 [0x00CA449C+1131676]\n\tOrdinal0 [0x00CB4812+1198098]\n\tOrdinal0 [0x00CA42B6+1131190]\n\tOrdinal0 [0x00C7E860+976992]\n\tOrdinal0 [0x00C7F756+980822]\n\tGetHandleVerifier [0x0104CC62+2510274]\n\tGetHandleVerifier [0x0103F760+2455744]\n\tGetHandleVerifier [0x00E6EABA+551962]\n\tGetHandleVerifier [0x00E6D916+547446]\n\tOrdinal0 [0x00D75F3B+1990459]\n\tOrdinal0 [0x00D7A898+2009240]\n\tOrdinal0 [0x00D7A985+2009477]\n\tOrdinal0 [0x00D83AD1+2046673]\n\tBaseThreadInitThunk [0x76646739+25]\n\tRtlGetFullPathName_UEx [0x77D78FEF+1215]\n\tRtlGetFullPathName_UEx [0x77D78FBD+1165]\n\n",
    "statusTrace" : "  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 1111, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 883, in call_fixture_func\n    fixture_result = next(generator)\n  File \"C:\\Users\\Denys\\PycharmProjects\\Prepay 2.0 QA\\tests\\conftest.py\", line 32, in setup\n    driver.get(url)\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 85, in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url, ))\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 183, in _dispatch\n    raise e\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 180, in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 442, in get\n    self.execute(Command.GET, {'url': url})\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 430, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\denys\\pycharmprojects\\prepay 2.0 qa\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup')"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_homepage"
  }, {
    "name" : "subSuite",
    "value" : "TestHomepage"
  }, {
    "name" : "host",
    "value" : "Legion"
  }, {
    "name" : "thread",
    "value" : "2500-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_homepage"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('setup')" ]
  },
  "source" : "53967b4fdb7da748.json",
  "parameterValues" : [ ]
}